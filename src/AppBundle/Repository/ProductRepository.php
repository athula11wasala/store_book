<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Product;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository {

    public function priceDiscount($childernBook = [], $fictionBook = []) {
        $allQuntity = 0;
        $allPrice = 0;
        $chilereBookAllPrice = 0;
        $chilereBookAllQty = 0;
        $fictionBookAllPrice = 0;
        $fictionBookAllQty = 0;
        $arr['discount'] = 0;
        $arr['additionalDiscount'] = 0;
        if ($childernBook) {
            foreach ($childernBook as $rows) {

                $chilldPrice = $rows['price'] * $rows['qty'];
                $chilereBookAllPrice = (floatval($chilereBookAllPrice) + floatval($chilldPrice));
                $chilereBookAllQty = ($chilereBookAllQty + $rows['qty']);
            }
        }
        if ($fictionBook) {

            foreach ($fictionBook as $rows) {

                $fictionPrice = $rows['price'] * $rows['qty'];
                $fictionBookAllPrice = (floatval($fictionBookAllPrice) + floatval($fictionPrice));
                $fictionBookAllQty = ($fictionBookAllQty + $rows['qty']);
            }
        }

        $allQuntity = intval($fictionBookAllQty) + intval($chilereBookAllQty);
        $allPrice = intval($fictionBookAllPrice) + intval($chilereBookAllPrice);

        if (($fictionBookAllQty >= 10) && ($chilereBookAllQty >= 10)) {
            // if user buy 10 books from each
            $arr['additionalDiscount'] = floatval($allPrice / 5);
        }
        if ($chilereBookAllQty >= 5) {
            // if user buy 5 or more   childern Books
            $arr['discount'] = floatval($chilereBookAllPrice / 10);
        }
        return $arr;
    }

    public function arrayKeyValueSearch($array, $key) {
        $results = array();
        $results['chilernBook'] = [];
        $results['fictionBook'] = [];
        if (is_array($array)) {
            foreach ($array as $subArray) {

                if (isset($subArray[$key]) ) {
                    if($subArray[$key] == 1){
                        $results['chilernBook'][] = $subArray;
                    }else {
                        $results['fictionBook'][] = $subArray;
                    }

                }
            }
        }

        return $results;
    }
    
    public function addProdcut($dataArr = []) {

        try {
            $prodcut = new  Product();
            $prodcut->setPrdocutName($dataArr['prdocutName']->getData());
            $prodcut->setProductDesc($dataArr["productDesc"]->getData());
            $prodcut->setProductCode($dataArr["productCode"]->getData());
            $prodcut->setProductPrice($dataArr["productPrice"]->getData());
            $em = $this->getEntityManager();
            $em->persist($prodcut);
            $em->flush();
        } catch (Exception $ex) {

            print_r($ex->getMessage());
            exit();
        }
        return true;
    }

    public function editProdcut($prodcut = nulll, $dataArr = []) {

        try {
            $prodcut->setPrdocutName($dataArr['prdocutName']->getData());
            $prodcut->setProductDesc($dataArr["productDesc"]->getData());
            $prodcut->setProductCode($dataArr["productCode"]->getData());
            $prodcut->setProductPrice($dataArr["productPrice"]->getData());
            $em = $this->getEntityManager();
            $em->persist($prodcut);
            $em->flush();
        } catch (Exception $ex) {

            print_r($ex->getMessage());
            exit();
        }
        return true;
    }
    
    /**
     * delete Product
     * @param $product
     * @return Boolean
     */

    public function deleteProduct($product = null) {

        try {
            $em = $this->getEntityManager();
            $em->remove($product);
            $em->flush();
        } catch (Exception $ex) {
            print_r($ex->getMessage());
            exit();
        }
        return true;
    }


}
